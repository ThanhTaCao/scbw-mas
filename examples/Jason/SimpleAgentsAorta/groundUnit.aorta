%Enact roles if we have capability for at least one objective and we have not ignored the role.
role(R) : org(role(R, Os)), bel(member(X,Os)), cap(X), ~bel(ignored(R))  => enact(R).

if bel(me(Me)), org(rea(Me,OwnRole)){
	% tell others about enacting roles
	send(_,tell,org(rea(Me,OwnRole))) : bel(agent(A), A \= Me), ~bel(sent(A, org(rea(Me,OwnRole)))) => send(A, org(rea(Me,OwnRole))).
	
	% tell others about dependency roles
	send(Role,tell,bel(X)) : bel(agent(A), A \= Me), org(rea(A,Role)), ~bel(sent(A, bel(X))) => send(A, bel(X)).
	%send(Role,achieve,bel(X)) : bel(agent(A), A \= Me), org(rea(A,Role)), ~bel(sent(A, opt(obj(X)))) => send(A, opt(obj(X))).
	%send SubObjective to dependee.
	obj(O) : ~goal(O), cap(O), ~bel(ignored(O)), org(obj(O,SOL)), bel(member(SO,SOL)),~bel(SO), 
			org(dep(OwnRole,Role,bel(SO))), org(rea(A,Role)), bel(agent(A)), 
			~bel(sent(A, opt(obj(SO)))) => send(A, opt(obj(SO))).
	
	% commit to goals where all subobjectives are done if we have capability to do so. , ~goal(O), cap(O)org(obj(O,SOL)), bel(findall(SO, (member(SO, SOL), \+ bel(SO)),[]))
	obj(O) : ~goal(O), cap(O), ~bel(ignored(O)), org(obj(O,SOL)), bel(findall(SO, (member(SO, SOL), \+ bel(SO)),[]))=>commit(O).
	
	~role(R) : org(rea(Me,R)) => deact(R).
}
